name: Deploy Static Site to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy via Terraform and SSH
    runs-on: ubuntu-latest
    defaults: 
      run: 
        working-directory: ./terraform

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION}}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve

    - name: Get EC2 Public IP
      id: ec2_ip
      run: |
        IP=$(terraform output -raw ec2_public_ip | tr -d '\r\n')
        echo "EC2_PUBLIC_IP=$IP" >> $GITHUB_ENV

    - name: Debug EC2 Public IP
      run: echo "EC2_PUBLIC_IP is ${{ env.EC2_PUBLIC_IP }}"

    - name: Wait for SSH to be available on EC2
      env:
        EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "$EC2_SSH_KEY" > private_key.pem
        chmod 600 private_key.pem
        echo "Waiting for SSH on $EC2_PUBLIC_IP..."
        for i in {1..15}; do
          ssh -vvv -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_PUBLIC_IP "echo SSH is ready" && break
          echo "SSH not available yet, retrying in 20s..."
          sleep 20
        done



    - name: Copy files to EC2 via SCP
      env:
        EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "$EC2_SSH_KEY" > private_key.pem
        chmod 600 private_key.pem
        scp -o StrictHostKeyChecking=no -i private_key.pem  ../site/index.html ec2-user@$EC2_PUBLIC_IP:/tmp/index.html


    - name: Deploy and reload Nginx in root shell
      env:
        EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem \
        ec2-user@$EC2_PUBLIC_IP << 'EOF'
        set -exo pipefail

        # Start a root shell to ensure access to /usr/sbin/nginx
        sudo su - << 'INNER'
        mkdir -p /usr/share/nginx/html
        mv /tmp/index.html /usr/share/nginx/html/index.html

        echo "Testing Nginx config..."
        nginx -t

        echo "Reloading Nginx..."
        nginx -s reload
        INNER

        echo "âœ… Nginx config tested and reloaded!"
        EOF

    # - name: Deploy and reload Nginx via binary
    #   env:
    #     EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}
    #   run: |
    #     ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_PUBLIC_IP << 'EOF'
    #     set -e

    #     sudo mkdir -p /usr/share/nginx/html
    #     sudo mv /tmp/index.html /usr/share/nginx/html/index.html
        
    #     export PATH=\$PATH:/usr/sbin
    #     echo "Testing Nginx config..."
    #     sudo env "PATH=\$PATH" nginx -t

    #     echo "Reloading Nginx gracefully..."
    #     sudo env "PATH=\$PATH" nginx -s reload

    #     echo " Nginx reload invoked successfully"
    #     EOF

